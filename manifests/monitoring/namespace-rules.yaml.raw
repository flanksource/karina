apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: k8s
    role: alert-rules
  name: namespace-k8s-rules
  namespace: monitoring
spec:
  groups:
    - name: namespace-recording-rules
      rules:
        - expr: |
            rate(kube_pod_container_status_restarts_total{job="kube-state-metrics"}[15m]) *
              on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
            * 60 * 5 > 0
          record: namespace:container_status_restarts:15m
        - record: namespace:KubePodCrashLooping
          expr: |
            (rate(kube_pod_container_status_restarts_total{job="kube-state-metrics"}[15m]) * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels)  * 60 * 5 > 0
        - record: namespace:KubePodNotReady
          expr: |
            sum by (namespace, pod) (max by(namespace, pod) (kube_pod_status_phase{job="kube-state-metrics", phase=~"Pending|Unknown"}) * on(namespace, pod) group_left(owner_kind) max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!="Job"}))  * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels > 0
        - record: namespace:KubeDeploymentGenerationMismatch
          expr: |
            kube_deployment_status_observed_generation{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
              !=
            kube_deployment_metadata_generation{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
        - record: namespace:KubeDeploymentReplicasMismatch
          expr: |
            kube_deployment_spec_replicas{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
              !=
            kube_deployment_status_replicas_available{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
        - record: namespace:KubeStatefulSetReplicasMismatch
          expr: |
            kube_statefulset_status_replicas_ready{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
              !=
            kube_statefulset_status_replicas{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
        - record: namespace:KubeStatefulSetGenerationMismatch
          expr: |
            kube_statefulset_status_observed_generation{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
              !=
            kube_statefulset_metadata_generation{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
        - record: namespace:KubeStatefulSetUpdateNotRolledOut
          expr: |
            max without (revision) (
              kube_statefulset_status_current_revision{job="kube-state-metrics"}  * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
                unless
              kube_statefulset_status_update_revision{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
            )
              *
            (
              kube_statefulset_replicas{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
                !=
              kube_statefulset_status_replicas_updated{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
            )
        - record: namespace:KubeDaemonSetRolloutStuck
          expr: |
            kube_daemonset_status_number_ready{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
              /
            kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels < 1.00
        - record: namespace:KubeContainerWaiting
          expr: |
            sum by (namespace, pod, container) (kube_pod_container_status_waiting_reason{job="kube-state-metrics"}) *
            on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels > 0
        - record: namespace:KubeDaemonSetNotScheduled
          expr: |
            kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
              -
            kube_daemonset_status_current_number_scheduled{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels > 0
        - record: namespace:KubeDaemonSetMisScheduled
          expr: |
            kube_daemonset_status_number_misscheduled{job="kube-state-metrics"} * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels  > 0
        - record: namespace:KubeCronJobRunning
          expr: |
            time() - kube_cronjob_next_schedule_time{job="kube-state-metrics"}  * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels > 3600
        - record: namespace:KubeJobCompletion
          expr: |
            kube_job_spec_completions{job="kube-state-metrics"}  * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels   - kube_job_status_succeeded{job="kube-state-metrics"}  * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels  > 0
        - record: namespace:KubeJobFailed
          expr: |
            kube_job_failed{job="kube-state-metrics"}  * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels > 0

        - record: namespace:CPUThrottlingHigh
          expr: |
            sum(increase(container_cpu_cfs_throttled_periods_total{container!="", }[5m])) by (container, pod, namespace)  * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
            /
            sum(increase(container_cpu_cfs_periods_total{}[5m])) by (container, pod, namespace) * on (namespace) group_left(label_apps_kubernetes_io_managed_by) kube_namespace_labels
            > ( 25 / 100 )
