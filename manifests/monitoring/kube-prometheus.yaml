apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  labels:
    alertmanager: main
  name: main
  namespace: monitoring
spec:
  image: quay.io/prometheus/alertmanager:{{.monitoring.alertmanager.version}}
  nodeSelector:
    kubernetes.io/os: linux
  replicas: 3
  externalUrl: https://alertmanager.{{.domain}}
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: alertmanager-main
  logLevel: debug
  version: {{.monitoring.alertmanager.version}}
  podMetadata:
    annotations:
      reload/all: "true"
      com.flanksource.infra.logs/processors.0.drop_event.when.contains.message: level=debug
      com.flanksource.infra.logs/processors.1.drop_event.when.contains.message: component=cluster
      "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
  alertmanagerConfigSelector:
    matchLabels:
      alertmanagerConfig: main
  alertmanagerConfigNamespaceSelector:
    matchLabels:
      apps.kubernetes.io/managed-by: karina
  {{- if .monitoring.alertmanager.persistence.capacity }}
  storage:
    volumeClaimTemplate:
      metadata:
        name: alertmanager-main-db
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: '{{ .monitoring.alertmanager.persistence.capacity }}'
        storageClassName: '{{ .monitoring.alertmanager.persistence.storageClass | default "local-path" }}'
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    alertmanager: main
  name: alertmanager-main
  namespace: monitoring
spec:
  ports:
    - name: web
      port: 9093
      targetPort: web
  selector:
    alertmanager: main
    app.kubernetes.io/name: alertmanager
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alertmanager-main
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-k8s-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-k8s
rules:
  - apiGroups:
      - ""
    resources:
      - nodes/metrics
    verbs:
      - get
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-k8s
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-k8s
subjects:
  - kind: ServiceAccount
    name: prometheus-k8s
    namespace: monitoring
---
{{- if index . "thanos" }}
{{- if not (index .thanos "disabled") }}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: thanos-sidecar
  namespace: monitoring
spec:
  dnsNames:
    - thanos-sidecar.{{.domain}}
    - thanos-sidecar.monitoring.svc.cluster.local
  issuerRef:
    kind: ClusterIssuer
    name: ingress-ca
  secretName: thanos-sidecar
---
apiVersion: v1
kind: Service
metadata:
  name: thanos-sidecar
  namespace: monitoring
spec:
  selector:
    prometheus: k8s
  ports:
    - protocol: TCP
      port: 10901
      targetPort: 10901
  type: ClusterIP
  clusterIP: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: thanos-sidecar
  namespace: monitoring
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
spec:
  tls:
    - secretName: thanos-sidecar
      hosts:
        - "thanos-sidecar.{{.domain}}"
  rules:
    - host: "thanos-sidecar.{{.domain}}"
      http:
        paths:
          - backend:
              service:
                name: thanos-sidecar
                port:
                  number: 10901
            pathType: ImplementationSpecific
{{- end }}
{{- end }}

---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  labels:
    prometheus: k8s
  name: k8s
  namespace: monitoring
  annotations:
    image: "quay.io/prometheus/prometheus:{{.monitoring.prometheus.version}}"
spec:
  alerting:
    alertmanagers:
      - name: alertmanager-main
        namespace: monitoring
        port: web
  baseImage: quay.io/prometheus/prometheus
  externalUrl: https://prometheus.{{.domain}}
  nodeSelector:
    kubernetes.io/os: linux
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  ruleNamespaceSelector: {}
  replicas: 2
  resources:
    requests:
      memory: 512Mi
      cpu: 100m
    limits:
      memory: 1532Mi
      cpu: 2000m
  retention: 240h
  disableCompaction: true
  routePrefix: ""
  ruleSelector:
    matchLabels:
      prometheus: k8s
      role: alert-rules
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: prometheus-k8s
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector: {}
  podMetadata:
    annotations:
      reload/all: "true"
      {{- if (index .monitoring.prometheus "persistence") }}
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      {{- end }}
  externalLabels:
    cluster: {{.name}}
  version: {{.monitoring.prometheus.version}}
  additionalAlertRelabelConfigs:
    name: alertmanager-relabeling
    key: config.yaml
  {{- if (index .monitoring "prometheus")  }}
  {{- if (index .monitoring.prometheus "persistence") }}
  storage:
    volumeClaimTemplate:
      spec:
        {{- if (index .monitoring.prometheus.persistence "storageClass")}}
        storageClassName: {{ .monitoring.prometheus.persistence.storageClass }}
        {{- end}}
        resources:
          requests:
            storage: {{ .monitoring.prometheus.persistence.capacity }}
  {{- end }}
  {{- end }}
  {{- if index . "thanos" }}
  {{- if not (index .thanos "disabled") }}
  secrets:
    - "thanos-sidecar"
    - "thanos-ca-cert"
  containers:
    - args:
      - sidecar
      - --prometheus.url=http://localhost:9090/
      - --tsdb.path=/prometheus
      - --grpc-address=0.0.0.0:10901
      - --http-address=0.0.0.0:10902
      - --objstore.config=$(OBJSTORE_CONFIG)
      - --grpc-server-tls-cert=/ssl/client/tls.crt
      - --grpc-server-tls-key=/ssl/client/tls.key
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: OBJSTORE_CONFIG
        valueFrom:
          secretKeyRef:
            key: thanos.yaml
            name: thanos-objstore-config
      image: docker.io/thanosio/thanos:{{.thanos.version}}
      imagePullPolicy: IfNotPresent
      name: thanos-sidecar
      ports:
      - containerPort: 10902
        name: http
        protocol: TCP
      - containerPort: 10901
        name: grpc
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /prometheus
        name: prometheus-k8s-db
        subPath: prometheus-db
      - mountPath: /ssl/client
        name: secret-thanos-sidecar
        readOnly: true
      - mountPath: /ssl/ca
        name: secret-thanos-ca-cert
        readOnly: true
 {{- end}}
 {{- end}}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    prometheus: k8s
  name: prometheus-k8s
  namespace: monitoring
spec:
  ports:
    - name: web
      port: 9090
      targetPort: web
  selector:
    app.kubernetes.io/name: prometheus
    prometheus: k8s
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-k8s
  namespace: monitoring
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus
  namespace: monitoring
  annotations:
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - secretName: prometheus-tls
      hosts:
        - prometheus.{{.domain}}
  rules:
    - host: prometheus.{{.domain}}
      http:
        paths:
          - backend:
              service:
                name:  prometheus-k8s
                port:
                  number: 9090
            pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alertmanager
  namespace: monitoring
  annotations:
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - secretName: alertmanager-tls
      hosts:
        - alertmanager.{{.domain}}
  rules:
    - host: alertmanager.{{.domain}}
      http:
        paths:
          - backend:
              service:
                name: alertmanager-main
                port:
                  number: 9093
            pathType: ImplementationSpecific
