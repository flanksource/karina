apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  labels:
    alertmanager: main
  name: main
  namespace: monitoring
spec:
  baseImage: quay.io/prometheus/alertmanager
  nodeSelector:
    kubernetes.io/os: linux
  replicas: 3
  externalUrl: alertmanager.{{.domain}}
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: alertmanager-main
  version: v0.18.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    alertmanager: main
  name: alertmanager-main
  namespace: monitoring
spec:
  ports:
    - name: web
      port: 9093
      targetPort: web
  selector:
    alertmanager: main
    app: alertmanager
  sessionAffinity: ClientIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alertmanager-main
  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-k8s
rules:
  - apiGroups:
      - ""
    resources:
      - nodes/metrics
    verbs:
      - get
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-k8s
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-k8s
subjects:
  - kind: ServiceAccount
    name: prometheus-k8s
    namespace: monitoring
---
{{- if index . "thanos" }}
{{- if not (index .thanos "disabled") }}

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: thanos-sidecar
  namespace: monitoring
spec:
  dnsNames:
    - thanos-sidecar.{{.domain}}
    - thanos-sidecar.monitoring.svc.cluster.local
  issuerRef:
    kind: ClusterIssuer
    name: ingress-ca
  secretName: thanos-sidecar

{{- end }}
{{- end }}

---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  labels:
    prometheus: k8s
  name: k8s
  namespace: monitoring
spec:
  alerting:
    alertmanagers:
      - name: alertmanager-main
        namespace: monitoring
        port: web
  baseImage: quay.io/prometheus/prometheus
  externalUrl: https://prometheus.{{.domain}}
  nodeSelector:
    kubernetes.io/os: linux
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  replicas: 2
  resources:
    requests:
      memory: 512Mi
      cpu: 100m
    limits:
      memory: 1532Mi
      cpu: 2000m
  retention: 240h
  disableCompaction: true
  routePrefix: ""
  ruleSelector:
    matchLabels:
      prometheus: k8s
      role: alert-rules
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: prometheus-k8s
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector: {}
  externalLabels:
    cluster: {{.name}}
  version: v2.11.0
  {{- if (index .monitoring "prometheus")  }}
  {{- if (index .monitoring.prometheus "persistence") }}
  storage:
    volumeClaimTemplate:
      spec:
        {{- if (index .monitoring.prometheus.persistence "storageClass")}}
        storageClassName: {{ .monitoring.prometheus.persistence.storageClass }}
        {{- end}}
        resources:
          requests:
            storage: {{ .monitoring.prometheus.persistence.capacity }}
  {{- end }}
  {{- end }}
  {{- if index . "thanos" }}
  {{- if not (index .thanos "disabled") }}
  secrets:
    - "thanos-sidecar"
    - "thanos-ca-cert"
  containers:
    - args:
      - sidecar
      - --prometheus.url=http://localhost:9090/
      - --tsdb.path=/prometheus/prometheus-db
      - --grpc-address=[$(POD_IP)]:10901
      - --http-address=[$(POD_IP)]:10902
      - --objstore.config=$(OBJSTORE_CONFIG)
      - --grpc-server-tls-cert=/ssl/client/tls.crt
      - --grpc-server-tls-key=/ssl/client/tls.key
      - --grpc-server-tls-client-ca=/ssl/ca/ca.crt
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: OBJSTORE_CONFIG
        valueFrom:
          secretKeyRef:
            key: thanos.yaml
            name: thanos-objstore-config
      image: thanosio/thanos:{{.thanos.version}}
      imagePullPolicy: IfNotPresent
      name: thanos-sidecar
      ports:
      - containerPort: 10902
        name: http
        protocol: TCP
      - containerPort: 10901
        name: grpc
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /prometheus
        name: prometheus-k8s-db
      - mountPath: /ssl/client
        name: secret-thanos-sidecar
        readOnly: true
      - mountPath: /ssl/ca
        name: secret-thanos-ca-cert
        readOnly: true
 {{- end}}
 {{- end}}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    prometheus: k8s
  name: prometheus-k8s
  namespace: monitoring
spec:
  ports:
    - name: web
      port: 9090
      targetPort: web
  selector:
    app: prometheus
    prometheus: k8s
  sessionAffinity: ClientIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-k8s
  namespace: monitoring
---
apiVersion: integreatly.org/v1alpha1
kind: Grafana
metadata:
  name: grafana
  namespace: monitoring
spec:
  client:
    preferService: True
  service:
    enabled: True
  config:
    log:
      mode: "console"
      level: "warn"
    security:
      admin_user: "root"
      admin_password: "secret"
    auth:
      disable_login_form: False
      disable_signout_menu: True
    auth.basic:
      enabled: True
    auth.anonymous:
      enabled: True
  dashboardLabelSelector:
    - matchExpressions:
        - { key: app, operator: In, values: [grafana] }

---
apiVersion: integreatly.org/v1alpha1
kind: GrafanaDataSource
metadata:
  name: prometheus
  namespace: monitoring
spec:
  name: prometheus.yaml
  datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-k8s:9090
      isDefault: false
      version: 1
      editable: true
      jsonData:
        tlsSkipVerify: true
        timeInterval: "5s"
    {{- if index . "thanos"}}
    {{- if eq .thanos.mode "observability"}}
    - name: thanos
      type: prometheus
      access: proxy
      url: http://thanos-query:9090
      isDefault: true
      version: 1
      editable: true
      jsonData:
        tlsSkipVerify: true
        timeInterval: "5s"
    {{ end }}
    {{ end }}
---
{{- if index . "filebeat" }}
{{- if index . "elasticsearch" }}
{{- if not (index .elasticsearch "disabled") }}
{{ range .filebeat}}
{{- if index . "elasticsearch" }}
apiVersion: integreatly.org/v1alpha1
kind: GrafanaDataSource
metadata:
  name: elasticsearch-{{.name}}
  namespace: monitoring
spec:
  name: elasticsearch.yaml
  datasources:
    - name: elasticsearch
      type: elasticsearch
      access: proxy
      basicAuth: true
      url: "https://{{.elasticsearch.url}}:{{.elasticsearch.port}}"
      basicAuthUser: {{.elasticsearch.user}}
      secureJsonData:
        basicAuthPassword: {{.elasticsearch.password}}
      isDefault: false
  {{- if ne .index "" }}
      database: "{{ .index }}-{{.version}}-*"
  {{- else }}
      database: "filebeat-{{.version}}-*"
  {{ end }}
      version: 1
      editable: true
      jsonData:
        tlsSkipVerify: true
        timeInterval: "5s"
        timeField: "@timestamp"
        esVersion: 70
        logMessageField: message
        logLevelField: fields.level
---
{{- end}}
{{- end}}
{{- end}}
{{- end}}
{{- end}}
apiVersion: integreatly.org/v1alpha1
kind: GrafanaDashboard
metadata:
  name: dashboard-with-plugins
  namespace: monitoring
  labels:
    app: grafana
spec:
  name: dashboard-with-plugins.json
  json: >
    {
      "id": null,
      "title": "Simple Dashboard with Plugins",
      "tags": [],
      "style": "dark",
      "timezone": "browser",
      "editable": true,
      "hideControls": false,
      "graphTooltip": 1,
      "panels": [],
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {
        "time_options": [],
        "refresh_intervals": []
      },
      "templating": {
        "list": []
      },
      "annotations": {
        "list": []
      },
      "refresh": "5s",
      "schemaVersion": 17,
      "version": 0,
      "links": []
    }
  plugins:
    - name: "grafana-piechart-panel"
      version: "1.3.9"
    - name: "grafana-clock-panel"
      version: "1.0.2"
    - name: "grafana-polystat-panel"
      version: "1.0.16"
    - name: "digrich-bubblechart-panel"
      version: "1.1.0"
    - name: "briangann-datatable-panel"
      version: "0.0.9"
    - name: "michaeldmoore-multistat-panel"
      version: "1.2.5"
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus
  namespace: monitoring
  annotations:
    kubernetes.io/tls-acme: "true"
  {{ if .oauth2Proxy.enabled }}
    nginx.ingress.kubernetes.io/auth-url: "https://oauth2.{{.domain}}/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2.{{.domain}}/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
  {{ end }}
spec:
  tls:
    - secretName: prometheus-tls
      hosts:
        - prometheus.{{.domain}}

  rules:
    - host: prometheus.{{.domain}}
      http:
        paths:
          - backend:
              serviceName: prometheus-k8s
              servicePort: 9090
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana
  namespace: monitoring
  annotations:
    kubernetes.io/tls-acme: "true"
  {{ if .oauth2Proxy.enabled }}
    nginx.ingress.kubernetes.io/auth-url: "https://oauth2.{{.domain}}/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2.{{.domain}}/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
  {{ end }}
spec:
  tls:
    - secretName: grafana-tls
      hosts:
        - grafana.{{.domain}}

  rules:
    - host: grafana.{{.domain}}
      http:
        paths:
          - backend:
              serviceName: grafana-service
              servicePort: 3000

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: alertmanager
  namespace: monitoring
  annotations:
    kubernetes.io/tls-acme: "true"
  {{ if .oauth2Proxy.enabled }}
    nginx.ingress.kubernetes.io/auth-url: "https://oauth2.{{.domain}}/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2.{{.domain}}/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
  {{ end }}
spec:
  tls:
    - secretName: alertmanager-tls
      hosts:
        - alertmanager.{{.domain}}
  rules:
    - host: alertmanager.{{.domain}}
      http:
        paths:
          - backend:
              serviceName: alertmanager-main
              servicePort: 9093
