apiVersion: v1
kind: Namespace
metadata:
  name: quack
  labels:
    openpolicyagent.org/webhook: ignore
  annotations:
    com.flanksource.infra.logs/enabled: "true"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quack
  namespace: quack
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: quack
  namespace: quack
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: quack
subjects:
  - kind: ServiceAccount
    name: quack
    namespace: quack

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: quack:system:extension-apiserver-authentication-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: quack
    namespace: quack

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quack
  namespace: quack
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: quack:system:api-server-auth
rules:
  - apiGroups:
      - "quack.pusher.com"
    resources:
      - admissionreviews
    verbs:
      - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: quack:anonymous
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: quack:system:api-server-auth
subjects:
  - kind: User
    name: system:anonymous
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: quack:system:api-server-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: quack:system:api-server-auth
subjects:
  - kind: ServiceAccount
    name: quack
    namespace: quack
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: quack:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: quack
    namespace: quack

---
apiVersion: v1
kind: Secret
metadata:
  name: quack-certs
  namespace: quack
  annotations:
    cert-manager.io/allow-direct-injection: "true"
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: quack-certs
  namespace: quack
spec:
  secretName: quack-certs
  dnsNames:
    - quack.quack.svc
  issuerRef:
    name: default-issuer
    kind: ClusterIssuer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quack
  namespace: quack
  labels:
    app: quack
spec:
  selector:
    matchLabels:
      app: quack
  template:
    metadata:
      name: quack
      labels:
        app: quack
    spec:
      serviceAccountName: quack
      containers:
        - name: quack
          image: quay.io/pusher/quack:v0.1.0
          imagePullPolicy: Always
          args:
            - --values-configmap=quack-config
            - --tls-cert-file=/etc/certs/tls.crt
            - --tls-private-key-file=/etc/certs/tls.key
            - --audit-log-path=-
            - --v=2
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: 500m
              memory: 100Mi
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: 443
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: 443
            initialDelaySeconds: 10
          volumeMounts:
            - name: certs
              mountPath: /etc/certs
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: certs
          secret:
            secretName: quack-certs
        - name: config
          configMap:
            name: quack-config

---
apiVersion: v1
kind: Service
metadata:
  name: quack
  namespace: quack
  labels:
    app: quack
spec:
  ports:
    - name: https-webhook # optional
      port: 443
  selector:
    app: quack

---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: quack
  annotations:
    cert-manager.io/inject-apiserver-ca: "true"
    cert-manager.io/inject-ca-from-secret: quack/quack-certs
webhooks:
  - name: quack.pusher.com
    clientConfig:
      service:
        name: quack
        namespace: quack
        path: /apis/quack.pusher.com/v1alpha1/admissionreviews
      caBundle: ""
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: ["*"]
        apiVersions: ["*"]
        resources:
          - configmaps
          - daemonsets
          - deployments
          - statefulsets
          - ingresses
          - services
    failurePolicy: Fail
    timeoutSeconds: 10
    namespaceSelector:
      matchExpressions:
        - key: quack.pusher.com/enabled
          operator: In
          values:
            - "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quack-config
  namespace: quack
data:
  Domain: "{{.domain}}"
  domain: "{{.domain}}"
  Name: "{{.name}}"
  name: "{{.name}}"
