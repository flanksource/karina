{{- $JVM_OPTIONS := .elasticsearch.mem.requests | strings.ReplaceAll "Ki" "k" | strings.ReplaceAll "Mi" "m" | strings.ReplaceAll "Gi" "g" -}}
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: logs
  namespace: eck
spec:
  version: {{.elasticsearch.version}}
  nodeSets:
    - name: default
      count: {{.elasticsearch.replicas}}
      config:
        node.master: true
        node.data: true
        node.ingest: true
        node.store.allow_mmap: false
        xpack.security.transport.ssl.supported_protocols: TLSv1.1,TLSv1.2
        xpack.security.authc.anonymous.roles: fluentd
      podTemplate:
        spec:
          containers:
            - name: elasticsearch
              env:
                - name: ES_JAVA_OPTS
                  value: -Xms{{ $JVM_OPTIONS }} -Xmx{{ $JVM_OPTIONS }}
              resources:
                requests:
                  memory: {{.elasticsearch.mem.requests}}
                  cpu: 0.5
                limits:
                  memory: {{.elasticsearch.mem.limits}}
                  cpu: 2
      {{- if not (eq .elasticsearch.persistence.enabled true) }}
          volumes:
            - name: elasticsearch-data
              emptyDir: {}
      {{- else}}
      volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{.elasticsearch.persistence.capacity}}
            storageClassName: {{.elasticsearch.persistence.storageClass}}
      {{- end}}
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: logs
  namespace: eck
spec:
  version: 7.6.0
  count: 1
  config:
    elasticsearch.ssl.certificateAuthorities: /usr/share/kibana/config/elasticsearch-certs/ca.crt
  elasticsearchRef:
    name: logs
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: logs-ing
  namespace: eck
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/client_max_body_size: "64m"
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - secretName: logs-tls
      hosts:
        - logs.{{.domain}}
  rules:
    - host: logs.{{.domain}}
      http:
        paths:
          - defaultBackend:
              service:
                name: logs-es-http
                port:
                  number: 9200
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana-ing
  namespace: eck
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    kubernetes.io/tls-acme: "true"
    {{ if index . "oauth2Proxy" }}
    {{ if not (index .oauth2Proxy "disabled") }}
    {{ if eq (len .ldap.userGroups) 0}}
    platform.flanksource.com/restrict-to-groups: {{ .ldap.adminGroup }}
    {{ else }}
    platform.flanksource.com/restrict-to-groups: {{ .ldap.adminGroup }};{{ join .ldap.userGroups ";" }}
    {{ end }}
    platform.flanksource.com/pass-auth-headers: "false"
    platform.flanksource.com/extra-configuration-snippet: |
     proxy_set_header Authorization "Basic {{ (print "elastic:" (kget "secret/eck/logs-es-elastic-user" "elastic")) | base64.Encode }}";
    {{ end }}
    {{ end }}
spec:
  tls:
    - secretName: kibana-tls
      hosts:
        - kibana.{{.domain}}
  rules:
    - host: kibana.{{.domain}}
      http:
        paths:
          - defaultBackend:
              service:
                name: logs-kb-http
                port:
                  number: 5601
