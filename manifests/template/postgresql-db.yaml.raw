# This file was generated by running 'make template/postgresql-db.yaml.raw' in manifests directory
apiVersion: templating.flanksource.com/v1
kind: Template
metadata:
  name: postgresql-db
spec:
  resources:
  - apiVersion: acid.zalan.do/v1
    kind: postgresql
    metadata:
      name: postgres-{{.metadata.name}}
      namespace: postgres-operator
    spec:
      additionalVolumes:
      - mountPath: /opt/extra-queries
        name: exporter-extra-queries
        subPath: ""
        targetContainers:
        - exporter
        volumeSource:
          configMap:
            name: postgres-exporter-config
      allowedSourceRanges: null
      dockerImage: docker.io/flanksource/spilo:1.6-p2.flanksource
      enableShmVolume: true
      env:
      - name: BACKUP_SCHEDULE
        value: '*/5 * * * *'
      - name: USE_WALG_RESTORE
        value: "false"
      - name: USE_WALG_BACKUP
        value: "false"
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            key: AWS_ACCESS_KEY_ID
            name: postgres-operator-cluster-environment
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            key: AWS_SECRET_ACCESS_KEY
            name: postgres-operator-cluster-environment
      - name: AWS_ENDPOINT
        valueFrom:
          secretKeyRef:
            key: AWS_ENDPOINT
            name: postgres-operator-cluster-environment
      - name: AWS_S3_FORCE_PATH_STYLE
        valueFrom:
          secretKeyRef:
            key: AWS_S3_FORCE_PATH_STYLE
            name: postgres-operator-cluster-environment
      - name: WAL_BUCKET_SCOPE_SUFFIX
      - name: WALG_S3_PREFIX
        value: '{{.spec.backup.bucket}}'
      - name: CLONE_WAL_BUCKET_SCOPE_SUFFIX
        value: /
      numberOfInstances: '{{ .spec.replicas | default "2" }}'
      patroni:
        initdb:
          data-checksums: "true"
          encoding: UTF8
          locale: en_US.UTF-8
        loop_wait: 10
        maximum_lag_on_failover: 33554432
        pg_hba:
        - hostssl all all 0.0.0.0/0 md5
        - host    all all 0.0.0.0/0 md5
        retry_timeout: 10
        slots: {}
        synchronous_mode: false
        synchronous_mode_strict: false
        ttl: 30
      podAnnotations:
        com.flanksource.infra.logs/processors.0.drop_event.when.contains.message: no action.  i am a secondary and i am following a leader
        com.flanksource.infra.logs/processors.1.drop_event.when.contains.message: no action.  i am the leader with the lock
        com.flanksource.infra.logs/processors.2.drop_event.when.contains.message: 'INFO: Lock owner:'
        com.flanksource.infra.logs/processors.3.drop_event.when.contains.message: 'INFO: does not have lock'
        com.flanksource.infra.logs/processors.4.dissect.tokenizer: '%{date} %{time} %{TZ} [%{PID}] %{user} %{level}: %{log}'
      postgresql:
        parameters: '{{ (coll.Dict "logging_collector" "false" "log_destination" "stderr" "log_line_prefix" "%m [%p] %q%u@%d " ) | coll.Merge ( .spec.parameters | default (coll.Dict) ) | data.ToJSON }}'
        version: "12"
      resources:
        limits:
          cpu: '{{.spec.resources.limits.cpu | default .spec.cpu | default "1000m"}}'
          memory: '{{.spec.resources.limits.memory | default .spec.memory | default "512Mi"}}'
        requests:
          cpu: '{{.spec.resources.requests.cpu | default .spec.cpu |  default "100m"}}'
          memory: '{{.spec.resources.requests.memory | default .spec.memory  |   default "128Mi"}}'
      serviceAnnotations: {}
      sidecars:
      - env:
        - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
          value: :9187
        - name: DATA_SOURCE_URI
          value: localhost?sslmode=disable
        - name: DATA_SOURCE_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: postgres.postgres-{{.metadata.name}}.credentials
        - name: DATA_SOURCE_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: postgres.postgres-{{.metadata.name}}.credentials
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: /opt/extra-queries/queries.yaml
        image: docker.io/bitnami/postgres-exporter:0.9.0
        name: exporter
        ports:
        - containerPort: 9187
          name: exporter
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 128Mi
      teamId: postgres
      tls: null
      users:
        app:
        - createdb
        - superuser
      volume:
        size: '{{ .spec.storage.size | default "20Gi" }}'
        storageClass: '{{ .spec.storage.storageClass | default "" }}'
  - apiVersion: v1
    data:
      AWS_ACCESS_KEY_ID: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_ACCESS_KEY_ID" }}'
      AWS_ENDPOINT_URL: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_ENDPOINT_URL" }}'
      AWS_REGION: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_REGION" }}'
      AWS_SECRET_ACCESS_KEY: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "AWS_SECRET_ACCESS_KEY" }}'
      BACKUP_IMAGE: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_IMAGE" }}'
      BACKUP_RETENTION_KEEP_DAILY: '{{ .spec.backup.retention.keepDaily | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_DAILY") }}'
      BACKUP_RETENTION_KEEP_HOURLY: '{{ .spec.backup.retention.keepHourly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_HOURLY") }}'
      BACKUP_RETENTION_KEEP_LAST: '{{ .spec.backup.retention.keepLast | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_LAST") }}'
      BACKUP_RETENTION_KEEP_MONTHLY: '{{ .spec.backup.retention.keepMonthly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_MONTHLY") }}'
      BACKUP_RETENTION_KEEP_WEEKLY: '{{ .spec.backup.retention.keepWeekly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_WEEKLY") }}'
      BACKUP_RETENTION_KEEP_YEARLY: '{{ .spec.backup.retention.keepYearly | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_RETENTION_KEEP_YEARLY") }}'
      BACKUP_S3_BUCKET: '{{ .spec.backup.bucket | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_S3_BUCKET") }}'
      BACKUP_SCHEDULE: '{{ .spec.backup.schedule | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_SCHEDULE") }}'
      RESTIC_PASSWORD: '{{ kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_PASSWORD" }}'
    kind: Secret
    metadata:
      name: backup-postgres-{{ .metadata.name }}-config
      namespace: postgres-operator
    when: '{{ .spec.backup.restic }}'
  - apiVersion: batch/v1beta1
    kind: CronJob
    metadata:
      name: backup-postgres-{{.metadata.name}}
      namespace: postgres-operator
    spec:
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 1
      jobTemplate:
        spec:
          template:
            metadata:
              labels:
                application: postgres-logical-backup
                cluster-name: postgres-{{.metadata.name}}
            spec:
              containers:
              - env:
                - name: RESTIC_REPOSITORY
                  value: s3:$(AWS_ENDPOINT_URL)/$(BACKUP_S3_BUCKET)
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: postgres.postgres-{{.metadata.name}}.credentials
                - name: PGHOST
                  value: postgres-{{.metadata.name}}
                - name: PGPORT
                  value: "5432"
                - name: PGSSLMODE
                  value: prefer
                - name: PGDATABASE
                  value: postgres
                - name: PGUSER
                  value: postgres
                - name: PG_VERSION
                  value: "12"
                envFrom:
                - secretRef:
                    name: backup-postgres-{{ .metadata.name }}-config
                image: '{{ kget (print "secret/postgres-operator/backup-postgres-" .metadata.name "-config") "BACKUP_IMAGE" }}'
                imagePullPolicy: IfNotPresent
                name: backup-postgres-{{.metadata.name}}
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 128Mi
                terminationMessagePath: /dev/termination-log
                terminationMessagePolicy: File
              dnsPolicy: ClusterFirst
              restartPolicy: Never
              schedulerName: default-scheduler
              terminationGracePeriodSeconds: 30
      schedule: '{{ kget (print "secret/postgres-operator/backup-postgres-" .metadata.name "-config") "BACKUP_SCHEDULE" }}'
      successfulJobsHistoryLimit: 3
      suspend: false
    when: '{{ .spec.backup.restic }}'
  - apiVersion: batch/v1beta1
    kind: CronJob
    metadata:
      name: backup-postgres-{{.metadata.name}}
      namespace: postgres-operator
    spec:
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 1
      jobTemplate:
        metadata:
          creationTimestamp: null
        spec:
          template:
            metadata:
              creationTimestamp: null
              labels:
                application: spilo-logical-backup
                cluster-name: postgres-{{.metadata.name}}
            spec:
              containers:
              - env:
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: postgres.postgres-{{.metadata.name}}.credentials
                - name: PGHOST
                  value: postgres-{{.metadata.name}}
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: postgres-operator-cluster-environment
                - name: PGPORT
                  value: "5432"
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ACCESS_KEY_ID
                      name: postgres-operator-cluster-environment
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: AWS_SECRET_ACCESS_KEY
                      name: postgres-operator-cluster-environment
                - name: LOGICAL_BACKUP_S3_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      key: AWS_ENDPOINT_URL
                      name: postgres-operator-cluster-environment
                - name: AWS_S3_FORCE_PATH_STYLE
                  valueFrom:
                    secretKeyRef:
                      key: AWS_S3_FORCE_PATH_STYLE
                      name: postgres-operator-cluster-environment
                - name: LOGICAL_BACKUP_S3_REGION
                  valueFrom:
                    secretKeyRef:
                      key: AWS_REGION
                      name: postgres-operator-cluster-environment
                - name: SCOPE
                  value: postgres-{{.metadata.name}}
                - name: PGSSLMODE
                  value: prefer
                - name: PGDATABASE
                  value: postgres
                - name: LOGICAL_BACKUP_S3_BUCKET
                  value: '{{.spec.backup.bucket}}'
                - name: LOGICAL_BACKUP_S3_SSE
                  value: AES256
                - name: PG_VERSION
                  value: "12"
                - name: PGUSER
                  value: postgres
                - name: CLUSTER_NAME_LABEL
                  value: cluster-name
                image: docker.io/flanksource/postgres-backups:0.1.5
                imagePullPolicy: IfNotPresent
                name: backup-postgres-{{.metadata.name}}
                ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 5432
                  protocol: TCP
                - containerPort: 8008
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 128Mi
                terminationMessagePath: /dev/termination-log
                terminationMessagePolicy: File
              dnsPolicy: ClusterFirst
              restartPolicy: Never
              schedulerName: default-scheduler
              securityContext: {}
              serviceAccount: postgres-pod
              serviceAccountName: postgres-pod
              terminationGracePeriodSeconds: 30
      schedule: '{{.spec.backup.schedule | default "0 2 * * *" }}'
      successfulJobsHistoryLimit: 3
      suspend: false
    when: '{{ not .spec.backup.restic }}'
  - apiVersion: canaries.flanksource.com/v1
    kind: Canary
    metadata:
      name: postgres-backup-{{.metadata.name}}
      namespace: postgres-operator
    spec:
      env:
        AWS_ACCESS_KEY_ID:
          secretKeyRef:
            key: AWS_ACCESS_KEY_ID
            name: postgres-operator-cluster-environment
        AWS_ENDPOINT:
          secretKeyRef:
            key: AWS_ENDPOINT_URL
            name: postgres-operator-cluster-environment
        AWS_SECRET_ACCESS_KEY:
          secretKeyRef:
            key: AWS_SECRET_ACCESS_KEY
            name: postgres-operator-cluster-environment
        LOGICAL_BACKUP_S3_REGION:
          secretKeyRef:
            key: AWS_REGION
            name: postgres-operator-cluster-environment
      interval: 14400
      s3Bucket:
      - accessKey: $AWS_ACCESS_KEY_ID
        bucket: '{{ .spec.backup.bucket | default (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_S3_BUCKET") }}'
        description: '{{.metadata.name}} (backup)'
        endpoint: $AWS_ENDPOINT
        maxAge: 86400
        minSize: 10240
        objectPath: postgres-{{.metadata.name}}
        region: $LOGICAL_BACKUP_S3_REGION
        secretKey: $AWS_SECRET_ACCESS_KEY
        usePathStyle: true
    when: '{{ not .spec.backup.restic }}'
  - apiVersion: canaries.flanksource.com/v1
    kind: Canary
    metadata:
      name: postgres-connection-{{.metadata.name}}
      namespace: postgres-operator
    spec:
      env:
        password:
          secretKeyRef:
            key: password
            name: postgres.postgres-{{.metadata.name}}.credentials
        username:
          secretKeyRef:
            key: username
            name: postgres.postgres-{{.metadata.name}}.credentials
      interval: 30
      postgres:
      - connection: user={{ "{{" }}.username{{ "}}" }} password={{ "{{" }}.password{{ "}}" }} host=postgres-{{.metadata.name}}.postgres-operator port=5432 dbname=postgres sslmode=disable
        description: '{{.metadata.name}} (heartbeat)'
        driver: postgres
        query: SELECT 1
        results: 1
  source:
    apiVersion: db.flanksource.com/v1
    kind: PostgresqlDB
