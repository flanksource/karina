kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
data:
  client-body-buffer-size: "{{.nginx.requestBodyBuffer}}"
  proxy-body-size: "{{.nginx.requestBodyMax}}"
  disable-access-log: "{{.nginx.disableAccessLog}}"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  annotations:
    reload/all: "true" #restart on cm/secret change
spec:
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      labels:
        app: ingress-nginx
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      volumes:
        - name: scripts
          configMap:
            name: lua-scripts
      hostNetwork: true
      containers:
        - name: nginx-ingress-controller
          image: k8s.gcr.io/ingress-nginx/controller:{{.nginx.version | default "v0.35.0"}}
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          requests:
            cpu: 100m
            memory: 512Mi
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --enable-ssl-passthrough
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LUA_PATH
              value: /usr/local/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;/usr/local/share/lua/5.1/flanksource/?.lua;;
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
            - name: metrics
              containerPort: 10254
            - name: webhook
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          volumeMounts:
            - name: scripts
              mountPath: /usr/local/share/lua/5.1/flanksource

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx-ingress-webhook
#   namespace: ingress-nginx
#   annotations:
#     reload/all: "true" #restart on cm/secret change
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: ingress-nginx-webhook
#   template:
#     metadata:
#       labels:
#         app: ingress-nginx-webhook
#     spec:
#       serviceAccountName: nginx-ingress-serviceaccount
#       volumes:
#         - name: scripts
#           configMap:
#             name: lua-scripts
#         - name: webhook-cert
#           secret:
#             secretName: ingress-nginx-admission
#       containers:
#         - name: ingress-nginx-webhook
#           image: k8s.gcr.io/ingress-nginx/controller:{{.nginx.version | default "v0.35.0"}}
#           requests:
#             cpu: 10m
#             memory: 20Mi
#           args:
#             - /nginx-ingress-controller
#             - --configmap=$(POD_NAMESPACE)/nginx-configuration
#             - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
#             - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
#             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
#             - --annotations-prefix=nginx.ingress.kubernetes.io
#             - --validating-webhook=:8443
#             - --validating-webhook-certificate=/usr/local/certificates/tls.crt
#             - --validating-webhook-key=/usr/local/certificates/tls.key
#             - --enable-ssl-passthrough
#           securityContext:
#             allowPrivilegeEscalation: true
#             capabilities:
#               drop:
#                 - ALL
#               add:
#                 - NET_BIND_SERVICE
#             runAsUser: 101
#           env:
#             - name: POD_NAME
#               valueFrom:
#                 fieldRef:
#                   fieldPath: metadata.name
#             - name: POD_NAMESPACE
#               valueFrom:
#                 fieldRef:
#                   fieldPath: metadata.namespace
#             - name: LUA_PATH
#               value: /usr/local/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;/usr/local/share/lua/5.1/flanksource/?.lua;;
#           ports:
#             - name: http
#               containerPort: 80
#             - name: https
#               containerPort: 443
#             - name: metrics
#               containerPort: 10254
#             - name: webhook
#               containerPort: 8443
#               protocol: TCP
#           livenessProbe:
#             failureThreshold: 3
#             httpGet:
#               path: /healthz
#               port: 10254
#               scheme: HTTP
#             initialDelaySeconds: 10
#             periodSeconds: 10
#             successThreshold: 1
#             timeoutSeconds: 10
#           readinessProbe:
#             failureThreshold: 3
#             httpGet:
#               path: /healthz
#               port: 10254
#               scheme: HTTP
#             periodSeconds: 10
#             successThreshold: 1
#             timeoutSeconds: 10
#           volumeMounts:
#             - name: scripts
#               mountPath: /usr/local/share/lua/5.1/flanksource
#             - name: webhook-cert
#               mountPath: /usr/local/certificates/
#               readOnly: true
# ---
# apiVersion: cert-manager.io/v1alpha2
# kind: Certificate
# metadata:
#   name: ingress-nginx-admission
#   namespace: ingress-nginx
#   annotations:
#     cert-manager.io/allow-direct-injection: "true"
# spec:
#   secretName: ingress-nginx-admission
#   dnsNames:
#     - ingress-nginx-controller-admission
#     - ingress-nginx-controller-admission.ingress-nginx.svc
#   issuerRef:
#     name: default-issuer
#     kind: ClusterIssuer
# ---
# apiVersion: admissionregistration.k8s.io/v1
# kind: ValidatingWebhookConfiguration
# metadata:
#   name: ingress-nginx-admission
#   annotations:
#     cert-manager.io/inject-ca-from: ingress-nginx/ingress-nginx-admission
# webhooks:
#   - name: validate.nginx.ingress.kubernetes.io
#     rules:
#       - apiGroups:
#           - extensions
#           - networking.k8s.io
#         apiVersions:
#           - v1beta1
#         operations:
#           - CREATE
#           - UPDATE
#         resources:
#           - ingresses
#     failurePolicy: Fail
#     sideEffects: None
#     admissionReviewVersions:
#       - v1
#       - v1beta1
#     clientConfig:
#       service:
#         namespace: ingress-nginx
#         name: ingress-nginx-controller-admission
#         path: /extensions/v1beta1/ingresses
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingress-nginx-webhook
  name: ingress-nginx-controller-admission
  namespace: ingress-nginx
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
  selector:
    app: ingress-nginx-webhook
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  annotations:
    prometheus.io/port: "10254"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/name: "ingress-nginx"
    app: ingress-nginx
spec:
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
    - name: metrics
      port: 10254
      targetPort: 10254
      protocol: TCP
  selector:
    app: ingress-nginx

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app: ingress-nginx
  name: nginx-controller
  namespace: monitoring
spec:
  jobLabel: nginx
  namespaceSelector:
    matchNames:
      - ingress-nginx
  endpoints:
    - port: metrics
      interval: 30s
      honorLabels: true
      metricRelabelings:
        # drop high cardinality labels
        - regex: controller_pod
          action: labeldrop
        - regex: pod
          action: labeldrop
        - regex: service
          action: labeldrop
        - regex: exported_service
          action: labeldrop
  selector:
    matchLabels:
      app: ingress-nginx
