TARGET_CRD_FILES := $(patsubst upstream/%/crd,crd/%.yaml,$(wildcard upstream/**/crd))
TARGET_DIRS := $(patsubst upstream/%/base,%.yaml,$(wildcard upstream/**/base))
TARGET_FILES :=$(patsubst upstream/%,%, $(wildcard upstream/*.yaml) $(wildcard upstream/**/*.yaml*))
TARGET_TEMPLATE_FILES := $(patsubst upstream/%/template,template/%.yaml.raw,$(wildcard upstream/**/template))

build: build-crds build-base build-templates
bin: bin/kustomize bin/yq bin/helm
build-crds: $(TARGET_CRD_FILES)
build-base: $(TARGET_DIRS) $(TARGET_FILES)
build-templates: $(TARGET_TEMPLATE_FILES)

info:
	@echo TARGET_DIRS=$(TARGET_DIRS)
	@echo TARGET_CRD_FILES=$(TARGET_CRD_FILES)
	@echo TARGET_FILES=$(TARGET_FILES)
	@echo TARGET_TEMPLATE_FILES=$(TARGET_TEMPLATE_FILES)

define BUILD_HELM_CHART
	@if [ -d "upstream/$(1)/helm" ]; then \
		echo "Generate templates for helm chart defined in upstream/$(1)/helm..." && \
		cd upstream/$*/helm && \
		$(HELM) template $$($(YQ) e '.chart_name' chart.yaml) --values values.yaml --output-dir ./generated_templates -n $$($(YQ) e '.namespace' chart.yaml) --version $$($(YQ) e '.version' chart.yaml ) --repo=$$($(YQ) e '.repo' chart.yaml) --include-crds && \
		generated_yaml_files=$$(find generated_templates -iname '*.yaml' | tr '\r\n' ' ') && \
		echo $$generated_yaml_files | xargs -n1 -I % $(YQ) -i eval 'del(.. | select(has("app.kubernetes.io/managed-by"))."app.kubernetes.io/managed-by")' % && \
		echo $$generated_yaml_files | xargs -n1 -I % $(YQ) -i eval 'del(.. | select(has("app.kubernetes.io/instance"))."app.kubernetes.io/instance")' % && \
		echo $$generated_yaml_files | xargs -n1 -I % $(YQ) -i eval 'del(.. | select(has("helm.sh/chart"))."helm.sh/chart")' %; \
	fi
endef

define BUILD_CRD
	@if [ -d "upstream/$(1)/crd" ]; then \
		echo "Generating crd $@..." && \
		out=$$($(KUSTOMIZE) build --load-restrictor LoadRestrictionsNone upstream/$(1)/crd) && \
		printf "# This file was generated by running 'make $@' in manifests directory\n%s" "$$out" > $@; \
	fi
endef

define BUILD_BASE
	@if [ -d "upstream/$(1)/base" ]; then \
		echo "Generating base $@..." && \
		out=$$($(KUSTOMIZE) build --load-restrictor LoadRestrictionsNone upstream/$(1)/base) && \
		printf "# This file was generated by running 'make $@' in manifests directory\n%s" "$$out" > $@; \
	fi
endef

define BUILD_TEMPLATE
	@if [ -d "upstream/$(1)/template" ]; then \
		echo "Generating $@..." && \
		out=$$($(KUSTOMIZE) build --load-restrictor LoadRestrictionsNone upstream/$(1)/template) && \
		printf "# This file was generated by running 'make $@' in manifests directory\n%s" "$$out" > $@; \
	fi
endef

.PHONY: platform-operator.yaml
platform-operator.yaml:
	$(call BUILD_BASE,platform-operator)
	$(SED) -i 's/.*TEMPLATE_MARK.*/        {{- range $$k, $$v := .platformOperator.args }}\n        - --{{$$k}}={{$$v}}\n        {{- end }}/' platform-operator.yaml

.PHONY: canary-checker.yaml
canary-checker.yaml:
	$(call BUILD_BASE,canary-checker)
	$(SED) -i 's/.*TEMPLATE_MARK.*/        {{- range $$server := .canaryChecker.aggregateServers }}\n        - --aggregateServers\n        - {{$$server}}\n        {{- end }}/' canary-checker.yaml

.SECONDEXPANSION:
crd/%.yaml: $$(wildcard upstream/$$*/crd/*) $$(wildcard upstream/$$*/helm/*.yaml) bin/kustomize bin/helm bin/yq
	$(call BUILD_HELM_CHART,$*)
	$(call BUILD_CRD,$*)

.SECONDEXPANSION:
template/%.yaml.raw: $$(wildcard upstream/$$*/template/*) bin/kustomize
	$(call BUILD_TEMPLATE,$*)

.SECONDEXPANSION:
%.yaml: $$(wildcard upstream/$$*/base/*) $$(wildcard upstream/$$*/helm/*.yaml) bin/kustomize bin/helm bin/yq
	$(call BUILD_HELM_CHART,$*)
	$(call BUILD_BASE,$*)

.PHONY: build build-crds build-base build-templates

OS   = $(shell uname -s | tr '[:upper:]' '[:lower:]')
ARCH = $(shell uname -m | sed 's/x86_64/amd64/')

# If current platform is darwin_arm64 (Apple Silicon), replace arm64 with amd64 (requires Rosseta 2)
ifeq ($(OS),darwin)
	ifeq ($(ARCH),arm64)
		ARCH = "amd64"
	endif
endif

bin/kustomize:
	@mkdir -p bin
	@curl -sSLo - https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.0.3/kustomize_v4.0.3_$(OS)_$(ARCH).tar.gz | tar xzf - -C bin/ && chmod +x bin/kustomize

bin/yq:
	@mkdir -p bin
	@curl -sSLo bin/yq https://github.com/mikefarah/yq/releases/download/v4.7.1/yq_$(OS)_$(ARCH) && chmod +x bin/yq

bin/helm:
	@mkdir -p bin
	@curl -sSLo - https://get.helm.sh/helm-v3.5.2-$(OS)-$(ARCH).tar.gz | tar xzf - -C bin/ --strip-components=1 && chmod +x bin/helm

KUSTOMIZE = $(realpath ./bin/kustomize)
YQ = $(realpath ./bin/yq)
HELM = $(realpath ./bin/helm)

SED = "sed"
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	SED = "gsed"
endif