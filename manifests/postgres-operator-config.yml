apiVersion: "acid.zalan.do/v1"
kind: OperatorConfiguration
metadata:
  name: default
  namespace: postgres-operator
configuration:
  enable_crd_validation: false
  etcd_host: ""
  docker_image: "{{.postgresOperator.spiloImage}}"
  enable_shm_volume: true
  max_instances: 5
  min_instances: 1
  resync_period: 30m
  repair_period: 5m
  # set_memory_request_to_limit: false
  # sidecar_docker_images:
  #   example: "exampleimage:exampletag"
  workers: 4
  users:
    replication_username: standby
    super_username: postgres
  kubernetes:
    cluster_domain: cluster.local
    cluster_labels:
      application: spilo
    cluster_name_label: cluster-name
    # custom_pod_annotations:
    #   keya: valuea
    #   keyb: valueb
    enable_init_containers: true
    enable_pod_antiaffinity: false
    enable_pod_disruption_budget: true
    enable_sidecars: true
    # infrastructure_roles_secret_name: "postgresql-infrastructure-roles"
    # inherited_labels:
    # - application
    # - environment
    # master_pod_move_timeout: 20m
    # node_readiness_label:
    #   status: ready
    # oauth_token_secret_name: postgresql-operator
    pdb_name_format: "postgres-{cluster}-pdb"
    pod_antiaffinity_topology_key: "kubernetes.io/hostname"
    # pod_environment_configmap: ""
    pod_management_policy: "ordered_ready"
    # pod_priority_class_name: ""
    pod_role_label: spilo-role
    # pod_service_account_definition: ""
    pod_service_account_name: postgres-pod
    # pod_service_account_role_binding_definition: ""
    pod_terminate_grace_period: 5m
    secret_name_template: "{username}.{cluster}.credentials"
    # spilo_fsgroup: 103
    spilo_privileged: false
    # toleration: {}
    # watched_namespace: ""
  postgres_pod_resources:
    default_cpu_limit: 2000m
    default_cpu_request: 500m
    default_memory_limit: 2Gi
    default_memory_request: 512Mi
    min_cpu_limit: 250m
    min_memory_limit: 250Mi
  timeouts:
    pod_label_wait_timeout: 10m
    pod_deletion_wait_timeout: 10m
    ready_wait_interval: 4s
    ready_wait_timeout: 30s
    resource_check_interval: 3s
    resource_check_timeout: 10m
  load_balancer:
    enable_master_load_balancer: false
    enable_replica_load_balancer: false
    master_dns_name_format: "{cluster}.{team}.{hostedzone}"
    replica_dns_name_format: "{cluster}-repl.{team}.{hostedzone}"
  aws_or_gcp:
    # additional_secret_mount: "some-secret-name"
    # additional_secret_mount_path: "/some/dir"
    aws_region: "{{.s3.region}}"
    # kube_iam_role: ""
    # log_s3_bucket: ""
    # wal_s3_bucket: ""
  logical_backup:
    logical_backup_docker_image: "{{.postgresOperator.backupImage}}"
    logical_backup_s3_bucket: "{{.postgresOperator.backupBucket}}"
    logical_backup_s3_endpoint: https://{{.s3.endpoint}}
    logical_backup_s3_region: "{{.s3.region}}"
    logical_backup_s3_access_key_id: "{{.s3.access_key}}"
    logical_backup_s3_secret_access_key: "{{.s3.secret_key}}"
    logical_backup_s3_sse: "AES256"
    logical_backup_schedule: "{{.postgresOperator.backupSchedule}}"
  debug:
    debug_logging: true
    enable_database_access: true
  teams_api:
    # enable_admin_role_for_users: true
    enable_team_superuser: false
    enable_teams_api: false
    # pam_configuration: ""
    pam_role_name: zalandos
    # postgres_superuser_teams:
    # - postgres_superusers
    protected_role_names:
      - admin
    team_admin_role: admin
    team_api_role_configuration:
      log_statement: all
    # teams_api_url: ""
  logging_rest_api:
    api_port: 8008
    cluster_history_entries: 1000
    ring_log_lines: 100
